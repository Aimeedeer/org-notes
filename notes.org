#+hugo_base_dir: .
#+options: author:Aimee

* Posts
:PROPERTIES:
:EXPORT_HUGO_SECTION: post
:EXPORT_HUGO_MENU: :menu main
:END:
** Play with Substrate        :substrate:blockchain:programming:@programming:
:PROPERTIES:
:EXPORT_FILE_NAME: play-with-substrate
:EXPORT_DATE: 2020-11-15
:EXPORT_HUGO_MENU: :menu main
:EXPORT_HUGO_SECTION: blockchain
:EXPORT_HUGO_LINKTITLE: blockchain
:EXPORT_DESCRIPTION: Substrate is interesting and it seems powerful.
:END:

*** 2020-11-15 Start
#+begin_src shell
$ WASM_BUILD_TOOLCHAIN=nightly-2020-10-05 cargo build --release
error: failed to run custom build command for `node-template-runtime v2.0.0 (/Users/aimeez/github/substrate-node-template/runtime)`

Caused by:
  process didn't exit successfully: `/Users/aimeez/github/substrate-node-template/target/release/build/node-template-runtime-329be64dd2778179/build-script-build` (exit code: 1)
  --- stderr
     Compiling wasm-build-runner-impl v1.0.0 (/Users/aimeez/github/substrate-node-template/target/release/wbuild-runner/node-template-runtime3117747485089870701)
      Finished release [optimized] target(s) in 0.54s
       Running `/Users/aimeez/github/substrate-node-template/target/release/wbuild-runner/node-template-runtime3117747485089870701/target/x86_64-apple-darwin/release/wasm-build-runner-impl`
  Rust nightly not installed, please install it!
warning: build failed, waiting for other jobs to finish...
error: build failed
#+end_src

#+begin_src shell
$ rustup toolchain install nightly-2020-10-05

$ WASM_BUILD_TOOLCHAIN=nightly-2020-10-05 cargo build --release

error: failed to run custom build command for `node-template-runtime v2.0.0 (/Users/aimeez/github/substrate-node-template/runtime)`

Caused by:
  process didn't exit successfully: `/Users/aimeez/github/substrate-node-template/target/release/build/node-template-runtime-329be64dd2778179/build-script-build` (exit code: 1)
  --- stderr
     Compiling wasm-build-runner-impl v1.0.0 (/Users/aimeez/github/substrate-node-template/target/release/wbuild-runner/node-template-runtime3117747485089870701)
      Finished release [optimized] target(s) in 0.39s
       Running `/Users/aimeez/github/substrate-node-template/target/release/wbuild-runner/node-template-runtime3117747485089870701/target/x86_64-apple-darwin/release/wasm-build-runner-impl`
  Rust WASM toolchain not installed, please install it!

  Further error information:
  ------------------------------------------------------------
     Compiling wasm-test v1.0.0 (/var/folders/g5/hf7q78jn0vngnqtqj_3qfm6r0000gn/T/.tmpWk51lL)
  error[E0463]: can't find crate for `std`
    |
    = note: the `wasm32-unknown-unknown` target may not be installed

  error: aborting due to previous error

  For more information about this error, try `rustc --explain E0463`.
  error: could not compile `wasm-test`

  To learn more, run the command again with --verbose.
  ------------------------------------------------------------

warning: build failed, waiting for other jobs to finish...
error: build failed
#+end_src

#+begin_src shell
$ rustup target add wasm32-unknown-unknown --toolchain nightly-2020-10-05

error: failed to run custom build command for `node-template-runtime v2.0.0 (/Users/aimeez/github/substrate-node-template/runtime)`

Caused by:
  process didn't exit successfully: `/Users/aimeez/github/substrate-node-template/target/release/build/node-template-runtime-329be64dd2778179/build-script-build` (exit code: 1)
  --- stdout
  Executing build command: "/Users/aimeez/.rustup/toolchains/nightly-x86_64-apple-darwin/bin/cargo" "rustc" "--target=wasm32-unknown-unknown" "--manifest-path=/Users/aimeez/github/substrate-node-template/target/release/wbuild/node-template-runtime/Cargo.toml" "--color=always" "--release"

  --- stderr
     Compiling wasm-build-runner-impl v1.0.0 (/Users/aimeez/github/substrate-node-template/target/release/wbuild-runner/node-template-runtime3117747485089870701)
      Finished release [optimized] target(s) in 0.45s
       Running `/Users/aimeez/github/substrate-node-template/target/release/wbuild-runner/node-template-runtime3117747485089870701/target/x86_64-apple-darwin/release/wasm-build-runner-impl`
     Compiling sp-arithmetic v2.0.0
     Compiling sp-runtime-interface v2.0.0
     Compiling parity-util-mem v0.7.0
  error[E0282]: type annotations needed
#+end_src

#+begin_src shell
$ rustc -V
rustc 1.50.0-nightly (98d66340d 2020-11-14)

$ rustup default stable

info: using existing install for 'stable-x86_64-apple-darwin'
info: default toolchain set to 'stable-x86_64-apple-darwin'

  stable-x86_64-apple-darwin unchanged - rustc 1.47.0 (18bf6b4f0 2020-10-07)


$ WASM_BUILD_TOOLCHAIN=nightly-2020-10-05 cargo build --release


Finished release [optimized] target(s) in 13m 17s
#+end_src

#+begin_src shell
$ ./target/release/node-template --dev --tmp
Nov 15 18:04:40.702  WARN Running in --dev mode, RPC CORS has been disabled.    
Nov 15 18:04:40.703  INFO Substrate Node    
Nov 15 18:04:40.703  INFO ‚úåÔ∏è  version 2.0.0-24da767-x86_64-macos    
Nov 15 18:04:40.703  INFO ‚ù§Ô∏è  by Substrate DevHub <https://github.com/substrate-developer-hub>, 2017-2020    
Nov 15 18:04:40.703  INFO üìã Chain specification: Development    
Nov 15 18:04:40.703  INFO üè∑  Node name: super-top-6271    
Nov 15 18:04:40.703  INFO üë§ Role: AUTHORITY    
Nov 15 18:04:40.703  INFO üíæ Database: RocksDb at /var/folders/g5/hf7q78jn0vngnqtqj_3qfm6r0000gn/T/substrate2jvpo0/chains/dev/db    
Nov 15 18:04:40.703  INFO ‚õì  Native runtime: node-template-1 (node-template-1.tx1.au1)    
Nov 15 18:04:40.755  INFO üî® Initializing Genesis block/state (state: 0xc29a‚Ä¶9e07, header-hash: 0x40ca‚Ä¶fc14)    
Nov 15 18:04:40.756  INFO üë¥ Loading GRANDPA authority set from genesis on what appears to be first startup.    
Nov 15 18:04:40.774  INFO ‚è±  Loaded block-time = 6000 milliseconds from genesis on first-launch    
Nov 15 18:04:40.774  WARN Using default protocol ID "sup" because none is configured in the chain specs    
Nov 15 18:04:40.774  INFO üè∑  Local node identity is: 12D3KooWSMTDCBT4GHADWJxdRJTBnSKgEAXrekDVcwG6SuQy1az9 (legacy representation: 12D3KooWSMTDCBT4GHADWJxdRJTBnSKgEAXrekDVcwG6SuQy1az9)    
Nov 15 18:04:41.071  INFO üì¶ Highest known block at #0    
Nov 15 18:04:41.072  INFO „ÄΩÔ∏è Prometheus server started at 127.0.0.1:9615    
Nov 15 18:04:41.073  INFO Listening for new connections on 127.0.0.1:9944.    
Nov 15 18:04:42.012  INFO üôå Starting consensus session on top of parent 0x40ca582052a890e826eb0c3d3e5d9a1383f7cb95dd87d5b542b574040ea6fc14    
Nov 15 18:04:42.017  INFO üéÅ Prepared block for proposing at 1 [hash: 0x384b4a0ce970b7b28dbc0764ef74ee3b3a55517c31476496db175845d03fe61e; parent_hash: 0x40ca‚Ä¶fc14; extrinsics (1): [0xab8e‚Ä¶deca]]    
Nov 15 18:04:42.021  INFO üîñ Pre-sealed block for proposal at 1. Hash now 0x753af28ba42e197ddf1df41477d452ac35cd3138afe70083f81e64637f51c1fd, previously 0x384b4a0ce970b7b28dbc0764ef74ee3b3a55517c31476496db175845d03fe61e.    
Nov 15 18:04:42.021  INFO ‚ú® Imported #1 (0x753a‚Ä¶c1fd)    
Nov 15 18:04:46.074  INFO üí§ Idle (0 peers), best: #1 (0x753a‚Ä¶c1fd), finalized #0 (0x40ca‚Ä¶fc14), ‚¨á 0 ‚¨Ü 0    
Nov 15 18:04:48.010  INFO üôå Starting consensus session on top of parent 0x753af28ba42e197ddf1df41477d452ac35cd3138afe70083f81e64637f51c1fd    
Nov 15 18:04:48.010  INFO üéÅ Prepared block for proposing at 2 [hash: 0x625c206bc45416b3745d544d93626a4cacaf74bf73c33cd11077edbeaaa95750; parent_hash: 0x753a‚Ä¶c1fd; extrinsics (1): [0xb6e9‚Ä¶2b6d]]    
Nov 15 18:04:48.014  INFO üîñ Pre-sealed block for proposal at 2. Hash now 0xe680ef911bd8a4c24ea2d7485255ca2cbe275cd51d0fa71dcc29846f84524d38, previously 0x625c206bc45416b3745d544d93626a4cacaf74bf73c33cd11077edbeaaa95750.    
Nov 15 18:04:48.014  INFO ‚ú® Imported #2 (0xe680‚Ä¶4d38)    
#+end_src

https://substrate.dev/docs/en/tutorials/create-your-first-substrate-chain/interact

** Blockchain Voting                          :blockchain:voting:@blockchain:
:PROPERTIES:
:EXPORT_FILE_NAME: blockchain-voting
:EXPORT_DATE: 2020-11-16
:EXPORT_HUGO_SECTION: blockchain
:EXPORT_DESCRIPTION: Reading notes about blockchain voting.
:END:

*** Posts

[[https://www.schneier.com/blog/archives/2019/02/blockchain_and_.html][Blockchain and Trust]], 2019
> When you analyze both blockchain and trust, you quickly realize that 
there is much more hype than value. Blockchain solutions are 
often much worse than what they replace.
>
> First, a caveat. By blockchain, I mean something very specific: 
the data structures and protocols that make up a public blockchain. 
These have three essential elements. The first is a distributed 
(as in multiple copies) but centralized (as in there‚Äôs only one) ledger, 
which is a way of recording what happened and in what order. 
This ledger is public, meaning that anyone can read it, and immutable, 
meaning that no one can change what happened in the past.
>
> The second element is the consensus algorithm, which is a way 
to ensure all the copies of the ledger are the same. This is 
generally called mining; a critical part of the system is that 
anyone can participate. It is also distributed, meaning that 
you don‚Äôt have to trust any particular node in the consensus network. 
It can also be extremely expensive, both in data storage and 
in the energy required to maintain it. Bitcoin has the most expensive 
consensus algorithm the world has ever seen, by far.
>
> Finally, the third element is the currency. This is some sort of 
digital token that has value and is publicly traded. Currency is 
a necessary element of a blockchain to align the incentives of 
everyone involved. Transactions involving these tokens are stored on the ledger.
>
> Most blockchain enthusiasts have a unnaturally narrow definition of trust. 
They‚Äôre fond of catchphrases like ‚Äú[[https://www.nytimes.com/2017/12/18/opinion/bitcoin-boom-technology-trust.html][in code we trust]],‚Äù ‚Äú[[https://www.amazon.com/Math-We-Trust-Bitcoin-Cryptocurrency-ebook/dp/B07C7TPXMD?tag=w050b-20][in math we trust]],‚Äù 
and ‚Äú[[https://cryptoclothing.org/product/crypto-shirt/][in crypto we trust]].‚Äù This is trust as verification. 
But verification isn‚Äôt the same as trust.

> Morals and reputation scale only to a certain population size. 
Primitive systems were good enough for small communities, 
but larger communities required delegation, and more formalism.
>
> The third is institutions. Institutions have rules and laws that 
induce people to behave according to the group norm, 
imposing sanctions on those who do not. In a sense, 
laws formalize reputation. Finally, the fourth is security systems. 
These are the wide varieties of security technologies we employ: 
door locks and tall fences, alarm systems and guards, 
forensics and audit systems, and so on.
>
> These four elements work together to enable trust. 


[[https://blog.ethereum.org/2014/12/26/secret-sharing-daos-crypto-2-0/][Secret Sharing DAOs: The Other Crypto 2.0]], 2014


*** Papers

[[https://people.csail.mit.edu/rivest/pubs/PSNR20.pdf][Going from Bad to Worse: From Internet Voting to Blockchain Voting]], November 6, 2020 (DRAFT)
> 



** DAO                                           :blockchain:dao:@blockchain:
:PROPERTIES:
:EXPORT_FILE_NAME: DAO
:EXPORT_DATE: 2020-11-16
:EXPORT_HUGO_SECTION: blockchain
:EXPORT_DESCRIPTION: Reading notes about the community DAO.
:END:

[[https://github.com/DavidJohnstonCEO/DecentralizedApplications][The General Theory of Decentralized Applications, Dapps]]
> The concept of a Dapp is so powerful and elegant, because it does not 
include these traditional corporate techniques. The ownership of 
the Dapp‚Äôs tokens is all that is required for the holder to use the system. 
It‚Äôs that simple. The value of the tokens is determined by 
how much people value the application. All the incentives, 
all the monetization, all the ways to raise support are 
built into this beautifully simple structure. 
Dapps are not required to recreate the functions that used to be necessary 
in centralized corporations in order to balance the power of shareholders 
and offer returns for investors and employees.

> Initial tokens are distributed
>
> If the Dapp is using the fund-raising mechanism, a wallet software becomes 
available to the stakeholders of the Dapp, so that they can exchange 
the tokens of the DA. In the case of Mastercoin, an Exodus fund-raising address 
and a wallet script were publicly released.
>
> If the Dapp is using the development mechanism, a bounty system is 
put in place that allows the suggestion of tasks to be performed, 
the tracking of the people who are working on those tasks and 
the criteria by which bounties can be awarded.

[[https://bitcoinmagazine.com/articles/bootstrapping-a-decentralized-autonomous-corporation-part-i-1379644274][Bootstrapping A Decentralized Autonomous Corporation: Part I]] | 2013
> As Let‚Äôs Talk Bitcoin‚Äôs Daniel Larmier pointed out in his own exploration on this concept, 
in a sense Bitcoin itself can be thought of as a very early prototype of exactly such a thing. 
Bitcoin has 21 million shares, and these shares are owned by what can be considered 
Bitcoin‚Äôs shareholders. It has employees, and it has a protocol for paying them: 25 BTC 
to one random member of the workforce roughly every ten minutes. It even has 
its own marketing department, to a large extent made up of the shareholders themselves. 
However, it is also very limited. It knows almost nothing about the world except for 
the current time, it has no way of changing any aspect of its function aside from 
the difficulty, and it does not actually do anything per se; it simply exists, 
and leaves it up to the world to recognize it. The question is: can we do better?

> The first challenge is obvious: how would such a corporation actually make 
any decisions? It‚Äôs easy to write code that, at least given predictable environments, 
takes a given input and calculates a desired action to take. But who is going to 
run the code? If the code simply exists as a computer program on some particular machine, 
what is stopping the owner of that machine from shutting the whole thing down, 
or even modifying its code to make it send all of its money to himself? To this problem, 
there is only one effective answer: distributed computing.

> Here, rather, we need the kind of distributed computing that we see in Bitcoin: 
a set of rules that decentrally self-validates its own computation. 
In Bitcoin, this is accomplished by a simple majority vote: if you are not helping to 
compute the blockchain with the majority network power, your blocks will get discarded 
and you will get no block reward. The theory is that no single attacker will 
have enough computer power to subvert this mechanism, so the only viable strategy 
is essentially to ‚Äúgo with the flow‚Äù and act honestly to help support the network 
and receive one‚Äôs block reward. So can we simply apply this mechanism to 
decentralized computation? That is, can we simply ask every computer in the network to 
evaluate a program, and then reward only those whose answer matches the majority vote? 

> Bitcoin is a special case because Bitcoin is simple: it is just a currency, 
carrying no property or private data of its own. A virtual corporation, 
on the other hand, would likely need to store the private key to its Bitcoin wallet ‚Äì 
a piece of data which should be available in its entirety to no one, not to everyone 
in the way that Bitcoin transactions are. But, of course, the private key must 
still be usable. Thus, what we need is some system of signing transactions, 
and even generating Bitcoin addresses, that can be computed in a decentralized way. 
Fortunately, Bitcoin allows us to do exactly that.

[[https://blog.ethereum.org/2014/05/06/daos-dacs-das-and-more-an-incomplete-terminology-guide/][DAOs, DACs, DAs and More: An Incomplete Terminology Guide]] | 2014
> as Bitshares‚Äô Daniel Larimer points out, ‚Äúeveryone thinks a DAC is just a way of 
IPOing your centralized company.‚Äù The intent of this article will be to delve into 
some of these concepts, and see if we can come up with at least the beginnings of 
a coherent understanding of what all of these things actually are.

> Note that there is one gray area here: contracts which are finite on one side, 
but infinite on the other side. For example, if I want to hedge the value of 
my digital assets, I might want to create a contract where anyone can 
freely enter and leave. Hence, the other side of the contract, the parties 
that are speculating on the asset at 2x leverage, has an unbounded number of parties, 
but my side of the contract does not. Here, I propose the following divide: 
if the side with a bounded number of parties is the side that intends to receive 
a specific service (ie. is a consumer), then it is a smart contract; however, 
if the side with a bounded number of parties is just in it for profit 
(ie. is a producer), then it is not.

> That is, there is a concept of shares in a DAC which are purchaseable 
and tradeable in some fashion, and those shares potentially entitle 
their holders to continual receipts based on the DAC‚Äôs success. 
A DAO is non-profit; though you can make money in a DAO, the way to do 
that is by participating in its ecosystem and not by providing investment 
into the DAO itself. Obviously, this distinction is a murky one; 
all DAOs contain internal capital that can be owned, and the value of 
that internal capital can easily go up as the DAO becomes more powerful/popular, 
so a large portion of DAOs are inevitably going to be DAC-like to some extent.
>
> Thus, the distinction is more of a fluid one and hinges on emphasis: 
to what extent are dividends the main point, and to what extent is it about 
earning tokens by participation? Also, to what extent does the concept of 
a ‚Äúshare‚Äù exist as opposed to simple virtual property? For example, 
a membership on a nonprofit board is not really a share, because membership 
frequently gets granted and confiscated at will, something which would be 
unacceptable for something classified as investable property, and a bitcoin is not 
a share because a bitcoin does not entitle you to any claim on profits or 
decision-making ability inside the system, whereas a share in a corporation 
definitely is a share. In the end, perhaps the distinction might ultimately be 
the surprisingly obscure point of whether or not the profit mechanism 
and the consensus mechanism are the same thing.

> Additionally, there is also the question of how all of these things should be built. 
An AI, for example, should likely exist as a network of private servers, 
each one running often proprietary local code, whereas a DO should be fully 
open source and blockchain-based. Between those two extremes, there is 
a large number of different paradigms to pursue. How much of the intelligence 
should be in the core code? Should genetic algorithms be used for updating code, 
or should it be futarchy or some voting or vetting mechanism based on individuals? 
Should membership be corporate-style, with sellable and transferable shares, 
or nonprofit-style, where members can vote other members in and out? 
Should blockchains be proof of work, proof of stake, or reputation-based? 
Should DAOs try to maintain balances in other currencies, 
or should they only reward behavior by issuing their own internal token? 
These are all hard problems and we have only just begun scratching the surface of them.

[[https://hackernoon.com/turn-an-internet-community-into-a-dao-in-3-steps-8k1b3w5y][Turn an Internet Community into a DAO in 3 Steps]]
> Simply put, DAO is a perfect structure to organize collective activities in the community, 
especially when most collaborations in the community are conducted distributedly, 
multi-disciplinarily, in random occurrence, and without a trust basis. 
DAO leverages Smart Contract on the blockchain to automatically implement contract terms 
to solve the trust issues. Also, contribution-based incentives can be allocated to activate the community.
>
> However, DAO's structure is not perfect and has some limitations for large scale applications.
>
> First, DAO relies too much on the smart contract, while the machine language is not suitable 
for conveying complex business logic. It's almost impossible for a general internet community 
to become an expert to compile all its collaboration needs into the contract. 
The stake is too high! It is also costly and low in efficiency if every operation step 
needs to run smart contracts on the blockchain to reach the global consensus. 
>
> Second, most of DAO's governance protocols mainly focus on the voting algorithm, 
while for the internet communities, voting would only be a small part of 
all the collective actions. Actually, the community is more caring about how to 
make the collaborations happen among all the community members.
>
> Third, as there is a lack of an effective management system to regulate 
the collaborations, the DAO has become only a shell structure without any real value 
creation activities in it. So, it's not hard to understand that the DAO's 
governance token holders have low intent to vote as they do not care about 
what is going on in the community, and they are only pursuing arbitrage opportunities.  

> The Wiki-based ComCo Management Framework contains one's collaboration history, 
which can be traced back as the credential check.
